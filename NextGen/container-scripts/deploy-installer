#!/usr/bin/env bash
#
# This script runs inside docker on Jenkins build agents. It generates
# an installer for the platform specified by the first argument, and
# uploads the installer to apsimdev.apsim.info.
#
# Expects 1 argument (platform name - either macos or debian).

set -e

# Ensure that target platform name has been passed as an argument.
usage="Usage: $0 <debian|macos>"
test $# -eq 1 || (echo $usage; exit 1)
test -z ${APSIM_SITE_CREDS:+x} && ( echo "APSIM_SITE_CREDS not set"; exit 1 )

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Check the platform name - exit if invalid, otherwise get a valid
# runtime identifier to pass to MSBuild, as well as the name of the
# script which will build the installer for this platform.
if [[ $platform -eq debian ]]; then
    script=debian/buildDebianInstaller
    ext=deb
elif [[ $platform -eq macos ]]; then
    script=macos/buildMacInstaller
    ext=dmg
else
    echo $usage
    exit 1
fi

platform=$1

# Ensure that the PULL_ID environment variable is set.
test -z ${PULL_ID:+x} && ( echo "PULL_ID not set"; exit 1 )

# Get the version number for the new release.
echo Retrieving version info...
version=$(./get-version $PULL_ID)
ISSUE_NUMBER=$(echo $version | cut -d. -f 4)

# Clone and build apsim.
echo Cloning apsim...
. ./main
cd $apsimx

# Build the installer.
echo Building installer...
outfile="$DIR"/apsim-$version.$ext
bash $apsimx/Setup/netcoreapp3.1/$script $version "$outfile"

# Finally, upload the installer.
echo Uploading installer...
curl -s -u $APSIM_SITE_CREDS -T "$outfile" ftp://apsimdev.apsim.info/APSIM/ApsimXFiles/
